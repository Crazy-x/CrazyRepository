package ${package.Controller};

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.baomidou.mybatisplus.mapper.EntityWrapper;
import com.baomidou.mybatisplus.plugins.Page;
import com.example.demo.core.constant.API;
import ${package.Entity}.${entity};
import com.example.demo.entity.common.PageResult;
import com.example.demo.entity.common.Result;
import ${package.Service}.${table.serviceName};
import com.example.demo.utils.ResponseEntityBuilder;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;

#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end

/**
 * <p>
 * ${table.comment} API 控制器
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
@Api(value = "${entity} API", description = "${table.comment} API" )
@RestController
@RequestMapping("/api#if(${package.ModuleName})/${package.ModuleName}#end/${table.entityPath}" )
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass}<${entity}> {
#else
public class ${table.controllerName} {
#end
#set ($serviceVar = $table.serviceName.substring(0,1).toLowerCase() + $table.serviceName.substring(1))

@Autowired
private ${table.serviceName} ${serviceVar};

@GetMapping({"", "/query"})
@ApiOperation(value = API.QUERY_NAME, notes = API.QUERY_DESC)
public ResponseEntity<PageResult> query(Page<${entity}> page, ${entity} entity){
        return ResponseEntityBuilder.build(${serviceVar}.selectPage(page,new EntityWrapper<${entity}>(entity)));
        }

@GetMapping({"/count"})
@ApiOperation(value = API.COUNT_NAME, notes = API.COUNT_DESC)
public ResponseEntity<Result> count(${entity} entity){
        return ResponseEntityBuilder.build(${serviceVar}.selectCount(new EntityWrapper<${entity}>(entity)));
        }

@PostMapping({"", "/create"})
@ApiOperation(value = API.CREATE_NAME, notes = API.CREATE_DESC)
public ResponseEntity<Result> create(@RequestBody ${entity} entity){
        return ResponseEntityBuilder.build(${serviceVar}.insert(entity),entity);
        }

@PutMapping({"/{id}", "/update"})
@ApiOperation(value = API.UPDATE_NAME, notes = API.UPDATE_DESC)
public ResponseEntity<Result> update(@RequestBody ${entity} entity){
        return ResponseEntityBuilder.build(${serviceVar}.updateById(entity));
        }

@DeleteMapping({"/{id}", "/delete/{id}"})
@ApiOperation(value = API.DELETE_NAME, notes = API.DELETE_DESC)
public ResponseEntity<Result> delete(@PathVariable int id){
        return ResponseEntityBuilder.build(${serviceVar}.deleteById(id));
        }

        }
